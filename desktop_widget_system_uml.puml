@startuml Desktop Widget System Class Diagram

!theme plain
skinparam classAttributeIconSize 0
skinparam classFontStyle bold

' 定义包结构
package "Framework Layer" {
    class WidgetFramework {
        - widgets: QMap<QString, BaseWidget*>
        - config: WidgetConfig
        + initialize(): bool
        + shutdown(): void
        + getWidgetManager(): WidgetManager*
    }
    
    class WidgetManager {
        - m_widgets: QMap<QString, BaseWidget*>
        - m_configPath: QString
        + createWidget(config: WidgetConfig): bool
        + removeWidget(id: QString): bool
        + startWidget(id: QString): bool
        + stopWidget(id: QString): bool
        + loadConfiguration(): bool
        + saveConfiguration(): bool
        + getWidgetIds(): QList<QString>
        + getWidget(id: QString): BaseWidget*
        {signal} widgetCreated(id: QString)
        {signal} widgetRemoved(id: QString)
        {signal} widgetStarted(id: QString)
        {signal} widgetStopped(id: QString)
    }
}

package "Core Components" {
    abstract class BaseWidget {
        # m_config: WidgetConfig
        # m_isDragging: bool
        + BaseWidget(config: WidgetConfig, parent: QWidget*)
        + {abstract} updateData(): void
        + {abstract} saveConfiguration(): void
        + {abstract} loadConfiguration(): void
        + getId(): QString
        + getType(): WidgetType
        # mousePressEvent(event: QMouseEvent*): void
        # mouseMoveEvent(event: QMouseEvent*): void
        # paintEvent(event: QPaintEvent*): void
        {signal} configurationChanged()
        {signal} dataUpdated()
    }
    
    class WidgetRenderer {
        - renderQueue: QQueue<BaseWidget*>
        + render(widget: BaseWidget*): void
        + addToQueue(widget: BaseWidget*): void
        + processQueue(): void
    }
    
    class InteractionSystem {
        - activeWidget: BaseWidget*
        + handleMouseEvent(event: QMouseEvent*): bool
        + handleKeyEvent(event: QKeyEvent*): bool
        + setActiveWidget(widget: BaseWidget*): void
    }
}

package "Backend Management" {
    class ManagementWindow {
        - widgetManager: WidgetManager*
        - ui: QVBoxLayout*
        + ManagementWindow(parent: QWidget*)
        + refreshWidgetList(): void
        + showCreateDialog(): void
        + showConfigDialog(id: QString): void
        - onCreateWidget(): void
        - onRemoveWidget(): void
    }
    
    class ConfigWindow {
        - currentWidget: BaseWidget*
        - settings: QMap<QString, QVariant>
        + ConfigWindow(widget: BaseWidget*, parent: QWidget*)
        + applySettings(): void
        + resetSettings(): void
        - validateInput(): bool
    }
    
    class CreateWidgetDialog {
        - widgetTypeCombo: QComboBox*
        - nameEdit: QLineEdit*
        - positionEdit: QLineEdit*
        + CreateWidgetDialog(parent: QWidget*)
        + getWidgetConfig(): WidgetConfig
        - onTypeChanged(): void
        - onAccept(): void
    }
    
    class ThemeSettingsDialog {
        - themeManager: ThemeManager*
        - themeList: QListWidget*
        - previewWidget: QWidget*
        + ThemeSettingsDialog(parent: QWidget*)
        + refreshThemeList(): void
        + applyTheme(themeName: QString): void
        - onThemeSelected(): void
    }
}

package "Utils" {
    class SystemTray {
        - trayIcon: QSystemTrayIcon*
        - trayMenu: QMenu*
        + SystemTray(parent: QObject*)
        + show(): void
        + hide(): void
        + showMessage(title: QString, message: QString): void
        - onTrayActivated(reason: QSystemTrayIcon::ActivationReason): void
    }
    
    class Logger {
        - logFile: QFile*
        - logLevel: LogLevel
        + {static} initialize(): void
        + {static} debug(message: QString): void
        + {static} info(message: QString): void
        + {static} warning(message: QString): void
        + {static} error(message: QString): void
        + {static} critical(message: QString): void
        - writeLog(level: LogLevel, message: QString): void
    }
    
    class ThemeManager {
        - currentTheme: QString
        - themes: QMap<QString, ThemeData>
        - resourceManager: ThemeResourceManager*
        + loadTheme(name: QString): bool
        + getCurrentTheme(): QString
        + getAvailableThemes(): QStringList
        + applyTheme(name: QString): void
        {signal} themeChanged(name: QString)
    }
    
    class ThemeResourceManager {
        - resources: QMap<QString, QVariant>
        - stylesheets: QMap<QString, QString>
        + loadThemeResources(themeName: QString): bool
        + getStylesheet(widget: QString): QString
        + getResource(key: QString): QVariant
        + clearCache(): void
    }
}

package "Widget Types" {
    class ClockWidget {
        - timer: QTimer*
        - timeLabel: QLabel*
        - dateLabel: QLabel*
        - format: QString
        - showDate: bool
        + ClockWidget(config: WidgetConfig, parent: QWidget*)
        + updateData(): void
        + saveConfiguration(): void
        + loadConfiguration(): void
        - updateTime(): void
        - formatTime(): QString
    }
    
    class WeatherWidget {
        - weatherLabel: QLabel*
        - temperatureLabel: QLabel*
        - iconLabel: QLabel*
        - networkManager: QNetworkAccessManager*
        - apiKey: QString
        - city: QString
        + WeatherWidget(config: WidgetConfig, parent: QWidget*)
        + updateData(): void
        + saveConfiguration(): void
        + loadConfiguration(): void
        - fetchWeatherData(): void
        - parseWeatherResponse(data: QByteArray): void
    }
    
    class AIRankingWidget {
        - rankingList: QListWidget*
        - updateTimer: QTimer*
        - networkManager: QNetworkAccessManager*
        + AIRankingWidget(config: WidgetConfig, parent: QWidget*)
        + updateData(): void
        + saveConfiguration(): void
        + loadConfiguration(): void
        - fetchRankingData(): void
        - updateRankingDisplay(): void
    }
    
    class SystemPerformanceWidget {
        - cpuUsageBar: QProgressBar*
        - memoryUsageBar: QProgressBar*
        - diskUsageBar: QProgressBar*
        - updateTimer: QTimer*
        + SystemPerformanceWidget(config: WidgetConfig, parent: QWidget*)
        + updateData(): void
        + saveConfiguration(): void
        + loadConfiguration(): void
        - updateSystemInfo(): void
        - getCpuUsage(): double
        - getMemoryUsage(): double
    }
    
    class NotesWidget {
        - textEdit: QTextEdit*
        - saveButton: QPushButton*
        - content: QString
        + NotesWidget(config: WidgetConfig, parent: QWidget*)
        + updateData(): void
        + saveConfiguration(): void
        + loadConfiguration(): void
        - saveNotes(): void
        - onTextChanged(): void
    }
    
    class SimpleNotesWidget {
        - noteLabel: QLabel*
        - editButton: QPushButton*
        - isEditing: bool
        + SimpleNotesWidget(config: WidgetConfig, parent: QWidget*)
        + updateData(): void
        + saveConfiguration(): void
        + loadConfiguration(): void
        - toggleEditMode(): void
    }
    
    class CalendarWidget {
        - calendar: QCalendarWidget*
        - eventList: QListWidget*
        - events: QMap<QDate, QStringList>
        + CalendarWidget(config: WidgetConfig, parent: QWidget*)
        + updateData(): void
        + saveConfiguration(): void
        + loadConfiguration(): void
        - onDateSelected(date: QDate): void
        - addEvent(date: QDate, event: QString): void
    }
}

package "Data Structures" {
    class WidgetConfig {
        + id: QString
        + type: WidgetType
        + name: QString
        + position: QPoint
        + size: QSize
        + customConfig: QVariantMap
        + isVisible: bool
        + isEnabled: bool
        + WidgetConfig()
        + WidgetConfig(type: WidgetType, name: QString)
        + toJson(): QJsonObject
        + fromJson(json: QJsonObject): bool
    }
    
    enum WidgetType {
        Clock
        Weather
        SystemInfo
        Calendar
        Notes
        SimpleNotes
        AIRanking
    }
    
    enum LogLevel {
        DEBUG
        INFO
        WARNING
        ERROR
        CRITICAL
    }
}

package "Qt Framework" {
    class QWidget
    class QObject
    class QDialog
}

' 继承关系
QObject <|-- WidgetManager
QObject <|-- SystemTray
QObject <|-- ThemeManager
QWidget <|-- BaseWidget
QWidget <|-- ManagementWindow
QDialog <|-- ConfigWindow
QDialog <|-- CreateWidgetDialog
QDialog <|-- ThemeSettingsDialog

BaseWidget <|-- ClockWidget
BaseWidget <|-- WeatherWidget
BaseWidget <|-- AIRankingWidget
BaseWidget <|-- SystemPerformanceWidget
BaseWidget <|-- NotesWidget
BaseWidget <|-- SimpleNotesWidget
BaseWidget <|-- CalendarWidget

' 组合关系
WidgetFramework *-- WidgetManager
WidgetManager *-- BaseWidget
ManagementWindow *-- WidgetManager
ThemeManager *-- ThemeResourceManager
BaseWidget *-- WidgetConfig

' 依赖关系
WidgetManager ..> BaseWidget : creates
ManagementWindow ..> CreateWidgetDialog : uses
ManagementWindow ..> ConfigWindow : uses
CreateWidgetDialog ..> WidgetConfig : creates
ConfigWindow ..> BaseWidget : configures
ThemeSettingsDialog ..> ThemeManager : uses
BaseWidget ..> WidgetType : uses
WidgetConfig ..> WidgetType : contains

' 关联关系
WidgetRenderer --> BaseWidget : renders
InteractionSystem --> BaseWidget : manages
Logger --> LogLevel : uses

@enduml 